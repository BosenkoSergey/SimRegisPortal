@inherits BaseViewPage<Guid, EmployeeActivityDto>

@using SimRegisPortal.Application.Features.EmployeeActivities.Queries
@using SimRegisPortal.Application.Features.EmployeeActivities.Commands
@using SimRegisPortal.Application.Features.Projects.Queries
@using SimRegisPortal.Application.Features.Employees.Queries

@if (!TimeReportId.HasValue)
{
    <EmployeeActivitySearchPanel QueryParams="_queryParams" Projects="_projects" Employees="_employees" Search="Search" />
}

<MudDataGrid Items="_entities" @ref="_grid" Filterable Dense>
    <ToolBarContent>
        <MudText Typo="Typo.h6">@PageTitle</MudText>
        <MudSpacer />
        <MudButton OnClick="Add" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Class="ml-2">
            Додати
        </MudButton>
    </ToolBarContent>

    <Columns>
        <HierarchyColumn InitiallyExpandedFunc="@(x => false)" />

        <PropertyColumn Property="x => x.ProjectId" Title="Проєкт">
            <CellTemplate Context="context">
                @_projects.GetValueOrDefault(context.Item.ProjectId)
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.EmployeeId" Title="Працівник">
            <CellTemplate Context="context">
                @_employees.GetValueOrDefault(context.Item.EmployeeId)
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Date" Title="Дата" Format="dd.MM.yyyy" />
        <PropertyColumn Property="x => x.Hours" Title="Тривалість, год.">
            <CellTemplate Context="context">
                @($"{(int)context.Item.Hours}:{(int)(context.Item.Hours * 60 % 60):00}")
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Priority" Title="Пріоритет">
            <CellTemplate Context="context">
                @context.Item.Priority.GetDescription()
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Complexity" Title="Складність">
            <CellTemplate Context="context">
                @context.Item.Complexity.GetDescription()
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn>
            <CellTemplate Context="context">
                @if (UserContext.HasPermission(UserPermissionType.ActivitiesWriteAll) || UserContext.EmployeeId == context.Item.EmployeeId)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => Edit(context.Item.Id))" Size="Size.Small" />
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="@(() => Delete(context.Item.Id))" Size="Size.Small" />
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <ChildRowContent>
        <MudPaper Class="px-4 py-2">
            <MudText Typo="Typo.subtitle2">Опис:</MudText>
            <MudText Class="mud-font-monospace mud-text-body2 mb-2" Style="white-space: pre-wrap;">
                @context.Item.Description
            </MudText>
        </MudPaper>
    </ChildRowContent>

    <PagerContent>
        <MudDataGridPager />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter] public Guid? TimeReportId { get; set; }

    private EmployeeActivityQueryParams _queryParams = new();
    private Dictionary<Guid, string> _projects = new();
    private Dictionary<Guid, string> _employees = new();

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Активності";
        EditPageUrl = "/activity";

        if (!UserContext.HasPermission(UserPermissionType.ActivitiesReadAll))
        {
            _queryParams.LockEmployee(UserContext.EmployeeId ?? Guid.Empty);
        }

        var projectsResult = await SendSafeAsync(new GetProjectsLookupQuery());
        if (projectsResult.IsSuccess)
        {
            _projects = projectsResult.Value!;
        }

        var employeesResult = await SendSafeAsync(new GetEmployeesLookupQuery());
        if (employeesResult.IsSuccess)
        {
            _employees = employeesResult.Value!;
        }

        await LoadEntities();
    }

    protected override IRequest<IEnumerable<EmployeeActivityDto>> GetCommand() =>
        new GetEmployeeActivitiesQuery(_queryParams);

    protected override IRequest DeleteCommand(Guid Id) =>
        new DeleteEmployeeActivityCommand(Id);

    protected override async Task OnParametersSetAsync()
    {
        if (TimeReportId.HasValue)
        {
            _queryParams = new(TimeReportId.Value);
            await LoadEntities();
        }
    }
}
