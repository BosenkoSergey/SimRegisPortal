@page "/project"
@page "/project/{Id:guid}"
@inherits BaseComponent

@using SimRegisPortal.Application.Features.Projects.Commands
@using SimRegisPortal.Application.Features.Projects.Queries
@using SimRegisPortal.Application.Features.Companies.Queries

@attribute [Authorize]

<PageTitle>Project</PageTitle>

<MudPaper Class="mx-auto mt-3 px-3 py-3" MaxWidth="700px">

    <MudText Typo="Typo.h5" GutterBottom>@(_model?.IsNew is true ? "Add Project" : "Edit Project")</MudText>

    @if (_model != null)
    {
        <MudForm @ref="_form">
            <MudStack Spacing="2">

                <MudSelect T="Guid" Label="Company" @bind-Value="_model.CompanyId" Required>
                    @foreach (var company in _companies)
                    {
                        <MudSelectItem Value="@company.Key">@company.Value</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField @bind-Value="_model.Name" Label="Name" Required />

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Start Date" @bind-Date="_model.StartDate" DateFormat="yyyy-MM-dd" Required />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="End Date" @bind-Date="_model.EndDate" DateFormat="yyyy-MM-dd" />
                    </MudItem>
                </MudGrid>

                <MudTextField @bind-Value="_model.Description" Label="Description" Lines="3" />
                <MudCheckBox @bind-Value="_model.IsInternal" Label="Internal Project" />

                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudButton OnClick="GoBack" Variant="Variant.Outlined" Style="min-width: 150px;">
                            Back
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 150px;">
                            Save
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Indeterminate Size="Size.Large" />
    }

</MudPaper>

@code {
    [Parameter] public Guid? Id { get; set; }

    private MudForm? _form;
    private ProjectDto? _model;
    private Dictionary<Guid, string> _companies = new();

    protected override async Task OnFirstInitializedAsync()
    {
        CheckPermissions(UserPermissionType.ProjectsWrite);

        var companiesResult = await SendSafeAsync(new GetCompaniesLookupQuery());
        if (companiesResult.IsSuccess)
        {
            _companies = companiesResult.Value!;
        }

        if (Id.HasValue)
        {
            var result = await SendSafeAsync(new GetProjectQuery(Id.Value));
            if (result.IsSuccess)
            {
                _model = result.Value;
            }
        }
        else
        {
            _model = new ProjectDto { IsNew = true };
            _model.CompanyId = _companies.Keys.FirstOrDefault();
        }
    }

    private async Task Save()
    {
        if (!await ValidateForm(_form)) return;
        if (_model is null) return;

        var result = await SendSafeAsync(new SaveProjectCommand(_model));
        if (result.IsSuccess)
        {
            _model = result.Value;
            await Notifier.Success("Saved successfully.");
        }
    }
}
