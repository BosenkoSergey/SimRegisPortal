@page "/exchange-rates"
@inherits BaseComponent

@using SimRegisPortal.Application.Features.Currencies.Queries
@using SimRegisPortal.Application.Features.ExchangeRates.Commands
@using SimRegisPortal.Application.Features.ExchangeRates.Queries
@using SimRegisPortal.Application.Models.Entities
@using SimRegisPortal.Application.Models.Entities.Related

<PageTitle>Exchange Rates</PageTitle>

<MudPaper Class="mt-3 px-3 py-3">
    <MudGrid Justify="Justify.FlexStart" Class="mb-3">
        <MudItem Style="width: 220px;">
            <MudDatePicker Label="Date From" @bind-Date="_queryParams.DateFrom" Clearable Variant="Variant.Outlined" />
        </MudItem>

        <MudItem Style="width: 220px;">
            <MudDatePicker Label="Date To" @bind-Date="_queryParams.DateTo" Clearable Variant="Variant.Outlined" />
        </MudItem>

        <MudItem Style="width: 250px;">
            <MudSelect Label="Currency From" @bind-Value="_queryParams.FromCurrencyId" Clearable Variant="Variant.Outlined">
                @foreach (var currency in _currencyCodes)
                {
                    <MudSelectItem Value="@((int?)currency.Key)">
                        @currency.Value
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem Style="width: 250px;">
            <MudSelect Label="Currency To" @bind-Value="_queryParams.ToCurrencyId" Clearable Variant="Variant.Outlined">
                @foreach (var currency in _currencyCodes)
                {
                    <MudSelectItem Value="@((int?)currency.Key)">
                        @currency.Value
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem Style="width: 150px;" Class="d-flex align-center">
            <MudButton OnClick="Search" Variant="Variant.Filled" Color="Color.Primary" Style="height: 56px; width: 100%;">
                Search
            </MudButton>
        </MudItem>
    </MudGrid>


    <MudDataGrid Items="_rates" @ref="_grid"
    Filterable="true" Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Exchange Rates</MudText>
            <MudSpacer />
            <MudButton StartIcon="@Icons.Material.Filled.Sync" Variant="Variant.Outlined" Class="ml-2">
                Import from Bank
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.CreateNewFolder" Variant="Variant.Outlined" Class="ml-2">
                Add
            </MudButton>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.FromCurrencyId" Title="From">
                <CellTemplate Context="context">
                    @_currencyCodes.GetValueOrDefault(context.Item.FromCurrencyId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.ToCurrencyId" Title="To">
                <CellTemplate Context="context">
                    @_currencyCodes.GetValueOrDefault(context.Item.ToCurrencyId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Date" Title="Date" Format="yyyy-MM-dd" />
            <PropertyColumn Property="x => x.Rate" Title="Rate" Format="0.0000000" />
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private Dictionary<int, string> _currencyCodes = new();
    private List<ExchangeRateDto> _rates = new();
    private ExchangeRateQueryParams _queryParams = new()
    {
        DateFrom = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)
    };

    private MudDataGrid<ExchangeRateDto>? _grid;

    protected override async Task OnFirstInitializedAsync()
    {
        await LoadCurrencies();
        await LoadRates();
    }

    private async Task LoadCurrencies()
    {
        var currencies = await Mediator.Send(new GetCurrenciesQuery());
        _currencyCodes = currencies.ToDictionary(x => x.Id, x => x.DisplayName);
    }

    private async Task LoadRates()
    {
        var exchangeRates = await Mediator.Send(new GetExchangeRatesQuery(_queryParams));
        _rates = exchangeRates.ToList();
    }

    private async Task Search()
    {
        try
        {
            await LoadRates();
        }
        catch (Exception ex)
        {
            await Notifier.Exception(ex);
        }
    }
}