@page "/exchange-rates"
@inherits BaseComponent

@attribute [Authorize]

@using SimRegisPortal.Application.Features.Currencies.Queries
@using SimRegisPortal.Application.Features.ExchangeRates.Commands
@using SimRegisPortal.Application.Features.ExchangeRates.Queries

@inject IDialogService DialogService

<PageTitle>Exchange Rates</PageTitle>

<MudPaper Class="mt-3 px-3 py-3">
    <ExchangeRatesFilter QueryParams="_queryParams" CurrencyCodes="_currencyCodes" Search="Search" />

    <MudDataGrid Items="_rates" @ref="_grid" Filterable="true" Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Exchange Rates</MudText>
            <MudSpacer />
            @if (UserContext.HasPermission(UserPermissionType.ExchangeRatesWrite))
            {
                <MudButton OnClick="OpenImportDialog" StartIcon="@Icons.Material.Filled.Sync" Variant="Variant.Outlined" Class="ml-2">
                    Import from Bank
                </MudButton>
                <MudButton OnClick="OpenAddDialog" StartIcon="@Icons.Material.Filled.CreateNewFolder" Variant="Variant.Outlined" Class="ml-2">
                    Add
                </MudButton>
            }
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.FromCurrencyId" Title="From">
                <CellTemplate Context="context">
                    @_currencyCodes.GetValueOrDefault(context.Item.FromCurrencyId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.ToCurrencyId" Title="To">
                <CellTemplate Context="context">
                    @_currencyCodes.GetValueOrDefault(context.Item.ToCurrencyId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Date" Title="Date" Format="yyyy-MM-dd" />
            <PropertyColumn Property="x => x.Rate" Title="Rate" Format="0.0000000" />

            @if (UserContext.HasPermission(UserPermissionType.ExchangeRatesWrite))
            {
                <TemplateColumn>
                    <CellTemplate Context="context">
                        <MudIconButton OnClick="@(() => OpenEditDialog(context.Item.Id))" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" />
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private Dictionary<int, string> _currencyCodes = new();
    private List<ExchangeRateDto> _rates = new();
    private ExchangeRateQueryParams _queryParams = new();

    private MudDataGrid<ExchangeRateDto>? _grid;

    protected override async Task OnFirstInitializedAsync()
    {
        CheckPermissions(UserPermissionType.ExchangeRatesRead);

        await LoadCurrencies();
        await LoadRates();
    }

    private async Task LoadCurrencies()
    {
        var result = await SendSafeAsync(new GetCurrenciesLookupQuery());
        if (result.IsSuccess)
        {
            _currencyCodes = result.Value!;

        }
    }

    private async Task LoadRates()
    {
        var result = await SendSafeAsync(new GetExchangeRatesQuery(_queryParams));
        if (result.IsSuccess)
        {
            _rates = result.Value!.ToList();

        }
    }

    private async Task Search()
    {
        await LoadRates();
    }

    private async Task OpenImportDialog()
    {
        var dialog = await DialogService.ShowAsync<ExchangeRatesImportDialog>();

        var result = await dialog.Result;
        if (result?.Data is true)
        {
            await LoadRates();
            await Notifier.Success("Imported successfully.");
        }
    }

    private async Task OpenAddDialog() => await OpenEditDialog(null);

    private async Task OpenEditDialog(int? id)
    {
        var parameters = new DialogParameters<ExchangeRateEditDialog>
        {
            { x => x.Id, id },
            { x => x.CurrencyCodes, _currencyCodes }
        };

        var dialog = await DialogService.ShowAsync<ExchangeRateEditDialog>(null, parameters);

        var result = await dialog.Result;
        if (result?.Data is true)
        {
            await LoadRates();
        }
    }
}