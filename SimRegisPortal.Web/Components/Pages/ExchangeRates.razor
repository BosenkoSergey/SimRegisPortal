@page "/exchange-rates"
@inherits BaseComponent

@using SimRegisPortal.Application.Features.Currencies.Queries
@using SimRegisPortal.Application.Features.ExchangeRates.Commands
@using SimRegisPortal.Application.Features.ExchangeRates.Queries
@using SimRegisPortal.Application.Models.Currency
@using SimRegisPortal.Application.Models.ExchangeRate

<PageTitle>Exchange Rates</PageTitle>

<MudPaper Class="pt-3">
    <MudStack Row Wrap="Wrap.Wrap" Justify="Justify.FlexStart" AlignItems="AlignItems.Start" Class="mx-3">
        <MudDatePicker Label="Date From" @bind-Date="_queryParams.DateFrom" Clearable Variant="Variant.Outlined" />
        <MudDatePicker Label="Date To" @bind-Date="_queryParams.DateTo" Clearable Variant="Variant.Outlined" />

        <MudSelect Label="Currency From"
        @bind-Value="_queryParams.FromCurrencyId" Clearable
        Variant="Variant.Outlined">
            @foreach (var currency in _currencyCodes)
            {
                <MudSelectItem Value="@((int?)currency.Key)">@currency.Value</MudSelectItem>
            }
        </MudSelect>

        <MudSelect Label="Currency To"
        @bind-Value="_queryParams.ToCurrencyId" Clearable
        Variant="Variant.Outlined">
            @foreach (var currency in _currencyCodes)
            {
                <MudSelectItem Value="@((int?)currency.Key)">@currency.Value</MudSelectItem>
            }
        </MudSelect>

        <MudButton OnClick="Search"
        Variant="Variant.Filled" Color="Color.Primary"
        Style="height: 56px; width: 150px; align-self: center;">
            Search
        </MudButton>
    </MudStack>

    <MudDataGrid Items="_rates" @ref="_grid"
    Filterable="true" Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Exchange Rates</MudText>
            <MudSpacer />
            <MudButton StartIcon="@Icons.Material.Filled.Sync">Import from Bank</MudButton>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.FromCurrencyId" Title="From">
                <CellTemplate Context="context">
                    @_currencyCodes.GetValueOrDefault(context.Item.FromCurrencyId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.ToCurrencyId" Title="To">
                <CellTemplate Context="context">
                    @_currencyCodes.GetValueOrDefault(context.Item.ToCurrencyId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Date" Title="Date">
                <CellTemplate Context="context">
                    @context.Item.Date.ToString("yyyy-MM-dd")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Rate" Title="Rate">
                <CellTemplate Context="context">
                    @context.Item.Rate.ToString("0.#######", CultureInfo.InvariantCulture)
                </CellTemplate>
            </PropertyColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private Dictionary<int, string> _currencyCodes = new();
    private List<ExchangeRateResponse> _rates = new();
    private ExchangeRateQueryParams _queryParams = new()
    {
        DateFrom = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)
    };

    private MudDataGrid<ExchangeRateResponse>? _grid;

    protected override async Task OnFirstInitializedAsync()
    {
        await LoadCurrencies();
        await LoadRates();
    }

    private async Task LoadCurrencies()
    {
        var currencies = await Mediator.Send(new GetCurrenciesQuery());
        _currencyCodes = currencies.ToDictionary(x => x.Id, x => x.DisplayName);
    }

    private async Task LoadRates()
    {
        var exchangeRates = await Mediator.Send(new GetExchangeRatesQuery(_queryParams));
        _rates = exchangeRates.ToList();
    }

    private async Task Search()
    {
        try
        {
            await LoadRates();
        }
        catch (Exception ex)
        {
            await Notifier.Exception(ex);
        }
    }
}