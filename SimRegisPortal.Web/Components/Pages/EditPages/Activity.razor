@page "/activity"
@page "/activity/{Id:guid}"
@inherits BaseEditPage<Guid, EmployeeActivityDto>

@using SimRegisPortal.Application.Features.EmployeeActivities.Commands
@using SimRegisPortal.Application.Features.EmployeeActivities.Queries
@using SimRegisPortal.Application.Features.Projects.Queries
@using SimRegisPortal.Application.Features.Employees.Queries

@attribute [Authorize]

<PageTitle>@PageTitle</PageTitle>

<MudPaper Class="mx-auto mt-3 px-3 py-3" MaxWidth="700px">
    <MudText Typo="Typo.h5" GutterBottom>@PageTitleText</MudText>

    @if (_model != null)
    {
        <MudForm @ref="_form">
            <MudStack Spacing="2">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSelect Label="Проєкт" @bind-Value="_model.ProjectId" Required>
                            @foreach (var project in _projects)
                            {
                                <MudSelectItem Value="@project.Key">@project.Value</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect Label="Працівник" @bind-Value="_model.EmployeeId" Required>
                            @foreach (var employee in _employees)
                            {
                                <MudSelectItem Value="@employee.Key">@employee.Value</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Дата" @bind-Date="_model.Date" Editable Required DateFormat="dd.MM.yyyy" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudNumericField Label="Годин" @bind-Value="_durationHours" Min="0" Max="999"
                                Immediate Required />
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField Label="Хвилин" @bind-Value="_durationMinutes" Min="0" Max="59"
                                Immediate Required />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="PriorityType" Label="Пріоритет" @bind-Value="_model.Priority" Required>
                            @foreach (var priority in Enum.GetValues<PriorityType>())
                            {
                                <MudSelectItem Value="@priority">@priority.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="ComplexityType" Label="Складність" @bind-Value="_model.Complexity" Required>
                            @foreach (var complexity in Enum.GetValues<ComplexityType>())
                            {
                                <MudSelectItem Value="@complexity">@complexity.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>


                <MudTextField @bind-Value="_model.Description" Label="Опис" Lines="3" Required />

                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudButton OnClick="GoBack" Variant="Variant.Outlined" Style="min-width: 150px;">Назад</MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 150px;">Зберегти</MudButton>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Indeterminate Size="Size.Large" />
    }
</MudPaper>

@code {
    private Dictionary<Guid, string> _projects = new();
    private Dictionary<Guid, string> _employees = new();

    private int _durationHours;
    private int _durationMinutes;

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Активність";

        var projectsResult = await SendSafeAsync(new GetProjectsLookupQuery());
        if (projectsResult.IsSuccess)
        {
            _projects = projectsResult.Value!;
        }

        var employeesResult = await SendSafeAsync(new GetEmployeesLookupQuery());
        if (employeesResult.IsSuccess)
        {
            _employees = employeesResult.Value!;

            if (!UserContext.HasPermission(UserPermissionType.ActivitiesWriteAll))
            {
                _employees = _employees
                    .Where(e => e.Key == UserContext.EmployeeId)
                    .ToDictionary(i => i.Key, i => i.Value);
            }
        }

        await LoadModelAsync();

        if (_model != null)
        {
            var totalMinutes = (int)(_model.Hours * 60);
            _durationHours = totalMinutes / 60;
            _durationMinutes = totalMinutes % 60;
        }
    }

    protected override async Task Save()
    {
        if (_model != null)
        {
            _model.Hours = _durationHours + Math.Round(_durationMinutes / 60m, 2);
        }
        
        await base.Save();
    }

    protected override IRequest<EmployeeActivityDto> GetCommand(Guid id) =>
        new GetEmployeeActivityQuery(id);

    protected override IRequest<EmployeeActivityDto> SaveCommand(EmployeeActivityDto model) =>
        new SaveEmployeeActivityCommand(model);

    protected override EmployeeActivityDto CreateNew()
    {
        return new()
        {
            IsNew = true,
            Date = DateTime.UtcNow.Date,
            ProjectId = _projects.Keys.FirstOrDefault(),
            EmployeeId = UserContext.EmployeeId ?? _employees.Keys.FirstOrDefault(),
        };
    }
}
