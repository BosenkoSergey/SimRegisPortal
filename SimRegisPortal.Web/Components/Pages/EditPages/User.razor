@page "/user"
@page "/user/{Id:guid}"
@inherits BaseEditPage<Guid, UserDto>

@using SimRegisPortal.Application.Features.Users.Queries
@using SimRegisPortal.Application.Features.Users.Commands

@attribute [Authorize]

<PageTitle>User</PageTitle>

<MudPaper Class="mx-auto mt-3 px-3 py-3" MaxWidth="700px">
    <MudText Typo="Typo.h5" GutterBottom>@PageTitleText</MudText>

    @if (_model != null)
    {
        <MudForm @ref="_form">
            <MudTabs Rounded>
                <MudTabPanel Text="General">
                    <MudStack Spacing="2" Class="mt-3">
                        <MudTextField @bind-Value="_model.FullName" Label="Full Name" Required />
                        <MudTextField @bind-Value="_model.Login" Label="Login" Required />
                        <MudTextField @bind-Value="_model.Email" Label="Email" Required InputType="InputType.Email" />
                        <MudSelect T="UserStatus" Label="Status" @bind-Value="_model.Status" Required>
                            @foreach (var status in Enum.GetValues<UserStatus>())
                            {
                                <MudSelectItem Value="@status">@status.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                </MudTabPanel>

                <MudTabPanel Text="Access">
                    <MudStack Spacing="2" Class="mt-3">
                        <MudCheckBox @bind-Value="_model.IsAdmin" Label="Is Admin" />
                        <MudDivider />
                        <MudText Typo="Typo.subtitle2">Permissions:</MudText>
                        <MudTable T="UserPermissionType" Items="_allPermissions" @bind-SelectedItems="_model.Permissions"
                        Hover Dense Bordered MultiSelection>
                            <HeaderContent>
                                <MudTh>Permission</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.GetDescription()</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudStack>
                </MudTabPanel>
            </MudTabs>

            <MudGrid Justify="Justify.FlexEnd" Class="mt-4">
                <MudItem>
                    <MudButton OnClick="GoBack" Variant="Variant.Outlined" Style="min-width: 150px;">Back</MudButton>
                </MudItem>
                <MudItem>
                    <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 150px;">Save</MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Indeterminate Size="Size.Large" />
    }
</MudPaper>

@code {
    private List<UserPermissionType> _allPermissions = [];

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "User";
        CheckPermissions(UserPermissionType.UsersWrite);

        _allPermissions = Enum.GetValues<UserPermissionType>()
            .OrderBy(p => p.GetDescription())
            .ToList();

        await LoadModelAsync();
    }

    protected override IRequest<UserDto> GetCommand(Guid id)
        => new GetUserQuery(id);

    protected override IRequest<UserDto> SaveCommand(UserDto model)
        => new SaveUserCommand(model);
}
