@page "/project"
@page "/project/{Id:guid}"
@inherits BaseEditPage<Guid, ProjectDto>

@using SimRegisPortal.Application.Features.Projects.Queries
@using SimRegisPortal.Application.Features.Projects.Commands
@using SimRegisPortal.Application.Features.Companies.Queries

@attribute [Authorize]

<PageTitle>Проєкт</PageTitle>

<MudPaper Class="mx-auto mt-3 px-3 py-3" MaxWidth="700px">
    <MudText Typo="Typo.h5" GutterBottom>@PageTitleText</MudText>

    @if (_model != null)
    {
        <MudForm @ref="_form">
            <MudStack Spacing="2">

                <MudSelect T="Guid" Label="Компанія" @bind-Value="_model.CompanyId" Required>
                    @foreach (var company in _companies)
                    {
                        <MudSelectItem Value="@company.Key">@company.Value</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField @bind-Value="_model.Name" Label="Назва" Required />

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Дата початку" @bind-Date="_model.StartDate" Editable DateFormat="dd.MM.yyyy" Required />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Дата завершення" @bind-Date="_model.EndDate" Editable DateFormat="dd.MM.yyyy" />
                    </MudItem>
                </MudGrid>

                <MudTextField @bind-Value="_model.Description" Label="Опис" Lines="3" />
                <MudCheckBox @bind-Value="_model.IsInternal" Label="Внутрішній проєкт" />

                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudButton OnClick="GoBack" Variant="Variant.Outlined" Style="min-width: 150px;">Назад</MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 150px;">Зберегти</MudButton>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Indeterminate Size="Size.Large" />
    }
</MudPaper>

@code {
    private Dictionary<Guid, string> _companies = new();

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Проєкт";
        CheckPermissions(UserPermissionType.ProjectsWrite);

        var companiesResult = await SendSafeAsync(new GetCompaniesLookupQuery());
        if (companiesResult.IsSuccess)
        {
            _companies = companiesResult.Value!;
        }

        await LoadModelAsync();
    }

    protected override IRequest<ProjectDto> GetCommand(Guid id)
        => new GetProjectQuery(id);

    protected override IRequest<ProjectDto> SaveCommand(ProjectDto model)
        => new SaveProjectCommand(model);

    protected override ProjectDto CreateNew()
    {
        return new()
        {
            IsNew = true,
            CompanyId = _companies.Keys.FirstOrDefault()
        };
    }
}
