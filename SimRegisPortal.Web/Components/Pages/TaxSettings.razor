@page "/tax-settings"
@inherits BaseComponent

@attribute [Authorize]

@using SimRegisPortal.Application.Features.Currencies.Queries
@using SimRegisPortal.Application.Features.TaxSettings.Commands
@using SimRegisPortal.Application.Features.TaxSettings.Queries

<PageTitle>Tax Settings</PageTitle>

<MudPaper Class="mx-auto mt-3 px-3 py-3" MaxWidth="700px">
    <MudText Typo="Typo.h5" GutterBottom>Tax Settings</MudText>

    @if (_model != null)
    {
        <MudForm @ref="_form">
            <MudStack Spacing="2">
                <MudSelect T="int" Label="Local Currency" @bind-Value="_model.LocalCurrencyId" Required="true">
                    @foreach (var currency in _currencyCodes)
                    {
                        <MudSelectItem Value="@currency.Key">@currency.Value</MudSelectItem>
                    }
                </MudSelect>

                <MudNumericField @bind-Value="_model.MinimumWage" Label="Minimum Wage"
                Required="true" RequiredError="Required"
                Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />

                <MudNumericField @bind-Value="_model.SocialTax" Label="Social Tax"
                Required="true" RequiredError="Required"
                Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.Fop2Pit" Label="FOP 2 PIT"
                        Required="true" RequiredError="Required"
                        Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.Fop2MilitaryTax" Label="FOP 2 Military Tax"
                        Required="true" RequiredError="Required"
                        Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.Fop3Pit" Label="FOP 3 PIT"
                        Required="true" RequiredError="Required"
                        Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.Fop3MilitaryTax" Label="FOP 3 Military Tax"
                        Required="true" RequiredError="Required"
                        Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.GigPit" Label="GIG PIT"
                        Required="true" RequiredError="Required"
                        Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.GigMilitaryTax" Label="GIG Military Tax"
                        Required="true" RequiredError="Required"
                        Immediate="true" Format="0.00" Culture="@CultureInfo.InvariantCulture" />
                    </MudItem>
                </MudGrid>

                @if (UserContext.HasPermission(UserPermissionType.TaxSettingsWrite))
                {
                    <MudGrid Justify="Justify.FlexEnd" Class="mt-0">
                        <MudItem>
                            <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 150px;">
                                Save
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
            </MudStack>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Indeterminate Size="Size.Large" />
    }
</MudPaper>

@code {
    private MudForm? _form;
    private TaxSettingDto? _model;
    private Dictionary<int, string> _currencyCodes = new();

    protected override async Task OnFirstInitializedAsync()
    {
        if (!UserContext.HasPermission(UserPermissionType.TaxSettingsRead))
        {
            NavManager.NavigateTo("/auth/denied", forceLoad: true);
            return;
        }

        await LoadCurrencies();
        await LoadTaxSetting();
    }

    private async Task LoadCurrencies()
    {
        var result = await SendSafeAsync(new GetCurrenciesQuery());
        if (result.IsSuccess)
        {
            _currencyCodes = result.Value!.ToDictionary(x => x.Id, x => x.DisplayName);

        }
    }

    private async Task LoadTaxSetting()
    {
        var result = await SendSafeAsync(new GetTaxSettingQuery());
        if (result.IsSuccess)
        {
            _model = result.Value;
        }
    }

    private async Task Submit()
    {
        if (_form is null || _model is null)
            return;

        await _form.Validate();

        if (!_form.IsValid)
        {
            await Notifier.Error("Form is not valid.");
        }

        var result = await SendSafeAsync(new SaveTaxSettingCommand(_model));
        if (result.IsSuccess)
        {
            _model = result.Value;
            await Notifier.Success("Settings saved.");

        }
    }
}
