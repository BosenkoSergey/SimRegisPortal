@page "/employees"
@inherits BaseViewPage<Guid, EmployeeDto>

@using SimRegisPortal.Application.Features.Employees.Commands
@using SimRegisPortal.Application.Features.Employees.Queries
@using SimRegisPortal.Application.Features.Users.Queries
@using SimRegisPortal.Application.Features.Currencies.Queries

@attribute [Authorize]

<PageTitle>@PageTitle</PageTitle>

<MudPaper Class="mt-3 px-3 py-3">
    <MudDataGrid Items="_entities" @ref="_grid" Filterable Hover Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">@PageTitle</MudText>
            <MudSpacer />
            @if (UserContext.HasPermission(UserPermissionType.EmployeesWrite))
            {
                <MudButton OnClick="Add" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Class="ml-2">
                    Додати
                </MudButton>
            }
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.LastName" Title="Ім'я">
                <CellTemplate Context="context">
                    @($"{context.Item.LastName} {context.Item.FirstName} {context.Item.MiddleName}")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.UserId" Title="Акаунт">
                <CellTemplate Context="context">
                    @_users.GetValueOrDefault(context.Item.UserId ?? Guid.Empty)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Position" Title="Позиція" />
            <PropertyColumn Property="x => x.HireDate" Title="Дата найму" Format="dd.MM.yyyy" />
            <PropertyColumn Property="x => x.DismissalDate" Title="Дата звільнення" Format="dd.MM.yyyy" />

            <PropertyColumn Property="x => x.SalaryScheme" Title="Податкова модель">
                <CellTemplate Context="context">
                    @context.Item.SalaryScheme.GetDescription()
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.HourlyRate" Title="Погодинна ставка">
                <CellTemplate Context="context">
                    @($"{context.Item.HourlyRate} {_currencies.GetValueOrDefault(context.Item.HourlyRateCurrencyId)}")
                </CellTemplate>
            </PropertyColumn>

            @if (UserContext.HasPermission(UserPermissionType.EmployeesWrite))
            {
                <TemplateColumn>
                    <CellTemplate Context="context">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => Edit(context.Item.Id))" Size="Size.Small" />
                        <MudIconButton OnClick="@(() => Delete(context.Item.Id))" Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" />
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private Dictionary<Guid, string> _users = new();
    private Dictionary<int, string> _currencies = new();

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Працівники";
        EditPageUrl = "/employee";

        CheckPermissions(UserPermissionType.EmployeesRead);

        var usersResult = await SendSafeAsync(new GetUsersLookupQuery());
        if (usersResult.IsSuccess)
        {
            _users = usersResult.Value!;
        }

        var currenciesResult = await SendSafeAsync(new GetCurrenciesQuery());
        if (currenciesResult.IsSuccess)
        {
            _currencies = currenciesResult.Value!.ToDictionary(c => c.Id, c => c.Symbol);
        }

        await LoadEntities();
    }

    protected override IRequest<IEnumerable<EmployeeDto>> GetCommand() =>
        new GetEmployeesQuery();

    protected override IRequest DeleteCommand(Guid Id) =>
        new DeleteEmployeeCommand(Id);
}
