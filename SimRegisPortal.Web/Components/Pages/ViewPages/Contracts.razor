@page "/contracts"
@inherits BaseViewPage<Guid, ContractDto>

@using SimRegisPortal.Application.Features.Contracts.Commands
@using SimRegisPortal.Application.Features.Contracts.Queries
@using SimRegisPortal.Application.Features.Projects.Queries
@using SimRegisPortal.Application.Features.Employees.Queries

@attribute [Authorize]

<PageTitle>@PageTitle</PageTitle>

<MudPaper Class="mt-3 px-3 py-3">
    <MudDataGrid Items="_entities" @ref="_grid" Filterable Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">@PageTitle</MudText>
            <MudSpacer />
            @if (UserContext.HasPermission(UserPermissionType.ContractsWrite))
            {
                <MudButton OnClick="Add" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Class="ml-2">
                    Add
                </MudButton>
            }
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.ProjectId" Title="Project">
                <CellTemplate Context="context">
                    @_projects.GetValueOrDefault(context.Item.ProjectId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.EmployeeId" Title="Employee">
                <CellTemplate Context="context">
                    @_employees.GetValueOrDefault(context.Item.EmployeeId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Number" Title="Number" />
            <PropertyColumn Property="x => x.DateFrom" Title="From" Format="yyyy-MM-dd" />
            <PropertyColumn Property="x => x.DateTo" Title="To" Format="yyyy-MM-dd" />

            @if (UserContext.HasPermission(UserPermissionType.ContractsWrite))
            {
                <TemplateColumn>
                    <CellTemplate Context="context">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => Edit(context.Item.Id))" Size="Size.Small" />
                        <MudIconButton OnClick="@(() => Delete(context.Item.Id))" Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" />
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private Dictionary<Guid, string> _projects = new();
    private Dictionary<Guid, string> _employees = new();

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Contracts";
        EditPageUrl = "/contract";

        CheckPermissions(UserPermissionType.ContractsRead);

        var projectsResult = await SendSafeAsync(new GetProjectsLookupQuery());
        if (projectsResult.IsSuccess)
        {
            _projects = projectsResult.Value!;
        }

        var employeesResult = await SendSafeAsync(new GetEmployeesLookupQuery());
        if (employeesResult.IsSuccess)
        {
            _employees = employeesResult.Value!;
        }

        await LoadEntities();
    }

    protected override IRequest<IEnumerable<ContractDto>> GetCommand() =>
        new GetContractsQuery();

    protected override IRequest DeleteCommand(Guid Id) =>
        new DeleteContractCommand(Id);
}
