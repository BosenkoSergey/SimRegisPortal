@page "/exchange-rates"
@inherits BaseViewPage<int, ExchangeRateDto>

@using SimRegisPortal.Application.Features.Currencies.Queries
@using SimRegisPortal.Application.Features.ExchangeRates.Queries
@using SimRegisPortal.Application.Features.ExchangeRates.Commands

@attribute [Authorize]

<PageTitle>@PageTitle</PageTitle>

<MudPaper Class="mt-3 px-3 py-3">
    <ExchangeRateSearchPanel QueryParams="_queryParams" CurrencyCodes="_currencies" Search="Search" />

    <MudDataGrid Items="_entities" @ref="_grid" Filterable Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">@PageTitle</MudText>
            <MudSpacer />
            @if (UserContext.HasPermission(UserPermissionType.ExchangeRatesWrite))
            {
                <MudButton OnClick="Import" StartIcon="@Icons.Material.Filled.CloudSync" Variant="Variant.Outlined" Class="ml-2">
                    Імпорт з банку
                </MudButton>
                <MudButton OnClick="Add" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Class="ml-2">
                    Додати
                </MudButton>
            }
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.FromCurrencyId" Title="З валюти">
                <CellTemplate Context="context">
                    @_currencies.GetValueOrDefault(context.Item.FromCurrencyId)
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.ToCurrencyId" Title="До валюти">
                <CellTemplate Context="context">
                    @_currencies.GetValueOrDefault(context.Item.ToCurrencyId)
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Date" Title="Дата" Format="dd.MM.yyyy" />
            <PropertyColumn Property="x => x.Rate" Title="Значення" Format="0.0000000" />

            @if (UserContext.HasPermission(UserPermissionType.ExchangeRatesWrite))
            {
                <TemplateColumn>
                    <CellTemplate Context="context">
                        <MudIconButton OnClick="@(() => Edit(context.Item.Id))" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" />
                        <MudIconButton OnClick="@(() => Delete(context.Item.Id))" Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" />
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    private Dictionary<int, string> _currencies = new();
    private ExchangeRateQueryParams _queryParams = new();

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Валютні курси";
        CheckPermissions(UserPermissionType.ExchangeRatesRead);

        await LoadCurrencies();
        await LoadEntities();
    }

    protected override IRequest<IEnumerable<ExchangeRateDto>> GetCommand() =>
        new GetExchangeRatesQuery(_queryParams);

    protected override IRequest DeleteCommand(int Id) =>
        new DeleteExchangeRateCommand(Id);

    private async Task LoadCurrencies()
    {
        var result = await SendSafeAsync(new GetCurrenciesLookupQuery());
        if (result.IsSuccess)
        {
            _currencies = result.Value!;
        }
    }

    private async Task Import()
    {
        var dialog = await DialogService.ShowAsync<ExchangeRatesImportDialog>();
        var result = await dialog.Result;

        if (result?.Data is true)
        {
            await LoadEntities();
            await Notifier.Success("Imported successfully.");
        }
    }

    protected override async Task Add() => await Edit(default);

    protected override async Task Edit(int id)
    {
        var parameters = new DialogParameters<ExchangeRateEditDialog>
        {
            { x => x.Id, id == default ? null : id },
            { x => x.CurrencyCodes, _currencies }
        };

        var dialog = await DialogService.ShowAsync<ExchangeRateEditDialog>(null, parameters);
        var result = await dialog.Result;

        if (result?.Data is true)
        {
            await LoadEntities();
        }
    }
}
