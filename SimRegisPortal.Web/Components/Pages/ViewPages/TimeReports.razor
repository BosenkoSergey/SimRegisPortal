@page "/time-reports"
@inherits BaseViewPage<Guid, TimeReportDto>

@using SimRegisPortal.Application.Features.Employees.Queries
@using SimRegisPortal.Application.Features.TimeReports.Commands
@using SimRegisPortal.Application.Features.TimeReports.Queries

@attribute [Authorize]

<PageTitle>@PageTitle</PageTitle>

<MudPaper Class="mt-3 px-3 py-3">
    <TimeReportSearchPanel QueryParams="_queryParams" Employees="_employees" Search="Search" />

    <MudDataGrid T="TimeReportDto" Items="_entities" @ref="_grid" @bind-SelectedItem="_selectedTimeReport" Filterable Hover Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6">@PageTitle</MudText>
            <MudSpacer />
        </ToolBarContent>

        <Columns>
            <TemplateColumn Title="">
                <CellTemplate Context="context">
                    <MudCheckBox Value="@(context.Item.Id == _selectedTimeReport?.Id)" ReadOnly />
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.EmployeeId" Title="Працівник">
                <CellTemplate Context="context">
                    @_employees.GetValueOrDefault(context.Item.EmployeeId)
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Year" Title="Рік" />
            <PropertyColumn Property="x => x.Month" Title="Місяць">
                <CellTemplate Context="context">
                    @context.Item.Month.GetDescription()
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Status" Title="Статус">
                <CellTemplate Context="context">
                    @context.Item.Status.GetDescription()
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Hours" Title="Години">
                <CellTemplate Context="context">
                    @($"{(int)context.Item.Hours}:{(int)(context.Item.Hours * 60 % 60):00}")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.CreatedAt" Title="Створено">
                <CellTemplate Context="context">
                    @context.Item.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.UpdatedAt" Title="Відредаговано">
                <CellTemplate Context="context">
                    @context.Item.UpdatedAt.ToString("dd.MM.yyyy HH:mm")
                </CellTemplate>
            </PropertyColumn>

            <TemplateColumn Title="Дії">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        @if (UserContext.HasPermission(UserPermissionType.TimeReportsWriteAll) || UserContext.EmployeeId == context.Item.EmployeeId)
                        {
                            @if (context.Item.Status is TimeReportStatus.New or TimeReportStatus.Rejected)
                            {
                                <MudButton OnClick="@(() => SetStatus(context.Item.Id, TimeReportStatus.Finalized))" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">
                                    Фіналізувати
                                </MudButton>
                            }
                        }
                        @if (UserContext.HasPermission(UserPermissionType.TimeReportsWriteAll))
                        {
                            @if (context.Item.Status is TimeReportStatus.Finalized)
                            {
                                <MudButton OnClick="@(() => SetStatus(context.Item.Id, TimeReportStatus.Rejected))" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">
                                    Відхилити
                                </MudButton>
                                <MudButton OnClick="@(() => SetStatus(context.Item.Id, TimeReportStatus.Approved))" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                                    Підтвердити
                                </MudButton>
                            }
                            @if (context.Item.Status is TimeReportStatus.Approved)
                            {
                                <MudButton OnClick="@(() => SetStatus(context.Item.Id, TimeReportStatus.Rejected))" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">
                                    Повернути
                                </MudButton>
                                <MudButton OnClick="@(() => Recalculate(context.Item.Id))" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small">
                                    Переразувати
                                </MudButton>
                                <MudButton OnClick="@(() => SetStatus(context.Item.Id, TimeReportStatus.Closed))" Color="Color.Info" Variant="Variant.Filled" Size="Size.Small">
                                    Закрити
                                </MudButton>
                            }
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>

    @if (_selectedTimeReport != null)
    {
        <MudTabs Class="mt-3" Rounded>
            <MudTabPanel Text="Активності">
                <ActivitiesView TimeReportId="@_selectedTimeReport.Id" />
            </MudTabPanel>
            <MudTabPanel Text="Платіжні запити">
                <PaymentRequestsView @key="_timeReportRowNumber" TimeReportId="@_selectedTimeReport.Id" />
            </MudTabPanel>
        </MudTabs>
    }
</MudPaper>

@code {
    private TimeReportQueryParams _queryParams = new();
    private Dictionary<Guid, string> _employees = new();

    private string _timeReportRowNumber = Guid.NewGuid().ToString();

    private TimeReportDto? _selectedTimeReport;

    protected override async Task OnFirstInitializedAsync()
    {
        PageTitle = "Часовий звіт";

        if (!UserContext.HasPermission(UserPermissionType.TimeReportsReadAll))
        {
            _queryParams.LockEmployee(UserContext.EmployeeId ?? Guid.Empty);
        }

        var result = await SendSafeAsync(new GetEmployeesLookupQuery());
        if (result.IsSuccess)
        {
            _employees = result.Value!;
        }

        await LoadEntities();
    }

    protected override IRequest<IEnumerable<TimeReportDto>> GetCommand() =>
        new GetTimeReportsQuery(_queryParams);

    private async Task SetStatus(Guid id, TimeReportStatus status)
    {
        var result = await SendSafeAsync(new ChangeTimeReportStatusCommand(id, status));
        if (result)
        {
            await Notifier.Success("Успішно оновлено.");
            await LoadEntities();

            if (status == TimeReportStatus.Approved)
            {
                await Recalculate(id);
            }
        }
    }

    private async Task Recalculate(Guid id)
    {
        var result = await SendSafeAsync(new RecalculateTimeReportCommand(id));
        if (result)
        {
            await Notifier.Success("Успішно перераховано.");
            _timeReportRowNumber = Guid.NewGuid().ToString();
        }
    }
}
